import React, { Component } from 'react';
import { connect } from 'react-redux';
import store from '../../../redux/store';
import { LinkOutlined, DisconnectOutlined } from '@ant-design/icons';
import { actionArm, actionArmUp, actionArmDown, targetHeadArm } from '../../main/3d/ship/robotic-arm';
import { valiNumber } from '../../../utils/validate'
import {Select} from "antd";
import {changeDepth, GUID, upLandData} from "../../main/3d/scene";
import {GPSInfo} from "../../main/requestParent";
// 自由模拟窗口
class RightWinWrapFree extends Component {
  constructor(props) {
    super(props);
    this.state = {
      isShow: false,
      isClose: 0,
      data: this.props.freeData,
      displayData: this.props.freeData,  // 用于存放显示在页面上的参数数据数组
      upControlLength: true,
      upHorControlLength: true,
      downControlLength: true,
      downHorControlLength: true,
      headControl: true,
      isFirst: true,
      overallEvaluation: [],
      guidance: [],
      limitData: this.props.LimitSet,
    };
  }
  setShipParams = (index, e, type, str) => {
    this.props.changeProce();
    let items = this.state.data;
    if (e !== null) {
          if (this.state.upControlLength && (index === 1 || index === 3)) {
            let temp = e.target.value;
            actionArmUp(index, '左', temp * Math.PI / 180, -items[3]['leftDragUpHorAngle'] * Math.PI / 180, 1000);
            actionArmUp(index, '右', temp * Math.PI / 180, items[5]['rightDragUpHorAngle'] * Math.PI / 180, 1000);
            actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - e.target.value) * Math.PI / 180, -items[9]['leftDragDownHorAngle'] * Math.PI / 180, 1000)
            actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - e.target.value) * Math.PI / 180, items[11]['rightDragDownHorAngle'] * Math.PI / 180, 1000)
            let attrName = str.split(',');
            let tempL = attrName[0];
            let tempR = attrName[1];
            items.forEach(item => {
              if (item.hasOwnProperty(tempL)) {
                item[tempL] = Number(e.target.value);
              } else if (item.hasOwnProperty(tempR)) {
                item[tempR] = Number(e.target.value)
              }
            });
          } else if (this.state.upHorControlLength && (index === 4 || index === 6)) {
            actionArmUp(index, '左', items[0]['leftDragUpAngle'] * Math.PI / 180, -e.target.value * Math.PI / 180, 1000);
            actionArmUp(index, '右', items[2]['rightDragUpAngle'] * Math.PI / 180, e.target.value * Math.PI / 180, 1000);
            let attrName = str.split(',');
            let tempL = attrName[0];
            let tempR = attrName[1];
            items.forEach(item => {
              if (item.hasOwnProperty(tempL)) {
                item[tempL] = Number(e.target.value);
              } else if (item.hasOwnProperty(tempR)) {
                item[tempR] = Number(e.target.value)
              }
            });
          } else if (this.state.downControlLength && (index === 7 || index === 9)) {
            actionArmDown(index, '左', (e.target.value - items[0]['leftDragUpAngle']) * Math.PI / 180, -items[9]['leftDragDownHorAngle'] * Math.PI / 180, 1000);
            actionArmDown(index, '右', (e.target.value - items[2]['rightDragUpAngle']) * Math.PI / 180, items[11]['rightDragDownHorAngle'] * Math.PI / 180, 1000);
            let attrName = str.split(',');
            let tempL = attrName[0];
            let tempR = attrName[1];
            items.forEach(item => {
              if (item.hasOwnProperty(tempL)) {
                item[tempL] = Number(e.target.value);
              } else if (item.hasOwnProperty(tempR)) {
                item[tempR] = Number(e.target.value)
              }
            });
          } else if (this.state.downHorControlLength && (index === 10 || index === 12)) {
            actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - items[0]['leftDragUpAngle']) * Math.PI / 180, -e.target.value * Math.PI / 180, 1000);
            actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - items[2]['rightDragUpAngle']) * Math.PI / 180, e.target.value * Math.PI / 180, 1000);
            let attrName = str.split(',');
            let tempL = attrName[0];
            let tempR = attrName[1];
            items.forEach(item => {
              if (item.hasOwnProperty(tempL)) {
                item[tempL] = Number(e.target.value);
              } else if (item.hasOwnProperty(tempR)) {
                item[tempR] = Number(e.target.value)
              }
            });
          } else if ((index === 13 || index === 15) && this.state.headControl) {
            targetHeadArm('左', e.target.value * Math.PI / 180);
            targetHeadArm('右', e.target.value * Math.PI / 180);
            items[12]['leftRunAngle'] = Number(e.target.value);
            items[14]['rightRunAngle'] = Number(e.target.value);
          } else {
            let attrName = str.split(',');
            let tempL = attrName[0];
            items.forEach(item => {
              if (item.hasOwnProperty(tempL)) {
                item[tempL] = Number(e.target.value);
              }
            });
            this.setState({
              data: items
            })
            // console.log("index",index)
            switch (index) {
              case 1:
                actionArmUp(index, '左', e.target.value * Math.PI / 180, -items[index + 2][items[index + 2]['reName']] * Math.PI / 180, 1000)
                actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - e.target.value) * Math.PI / 180, -items[9]['leftDragDownHorAngle'] * Math.PI / 180, 1000)
                break;
              case 3:
                actionArmUp(index, '右', e.target.value * Math.PI / 180, items[index + 2][items[index + 2]['reName']] * Math.PI / 180, 1000)
                actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - e.target.value) * Math.PI / 180, items[11]['rightDragDownHorAngle'] * Math.PI / 180, 1000)
                break;
              case 4:
                actionArmUp(index, '左', items[index - 4][items[index - 4]['reName']] * Math.PI / 180, -e.target.value * Math.PI / 180, 1000)
                // actionArmUp(index, '右', 2, (items[8]['rightDragDownAngle'] - e.target.value) * Math.PI / 180, items[5]['rightDragUpHorAngle'] * Math.PI / 180);
                break;
              case 6:
                actionArmUp(index, '右', items[index - 4][items[index - 4]['reName']] * Math.PI / 180, e.target.value * Math.PI / 180, 1000)
                // actionArmUp(index, '右', 2, (items[8]['rightDragDownAngle'] - e.target.value) * Math.PI / 180, items[5]['rightDragUpHorAngle'] * Math.PI / 180);
                break;
              case 7:
                actionArmDown(index, '左', (e.target.value - items[0]['leftDragUpAngle']) * Math.PI / 180, -items[9]['leftDragDownHorAngle'] * Math.PI / 180, 1000)
                break;
              case 9:
                actionArmDown(index, '右', (e.target.value - items[2]['rightDragUpAngle']) * Math.PI / 180, items[11]['rightDragDownHorAngle'] * Math.PI / 180, 1000)
                break;
              case 10:
                actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - items[0]['leftDragUpAngle']) * Math.PI / 180, -e.target.value * Math.PI / 180, 1000);
                items[9]['leftDragDownHorAngle'] = Number(e.target.value);
                break;
              case 12:
                actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - items[2]['rightDragUpAngle']) * Math.PI / 180, e.target.value * Math.PI / 180, 1000);
                items[11]['rightDragDownHorAngle'] = Number(e.target.value);
                break;
              case 13:
                targetHeadArm('左', e.target.value * Math.PI / 180);
                items[12]['leftRunAngle'] = Number(e.target.value);
                break;
              case 15:
                targetHeadArm('右', e.target.value * Math.PI / 180);
                items[14]['rightRunAngle'] = Number(e.target.value);
                break;
                default:
            }
          }

    } else if (type === 'reduce') {
      if ((index === 1 || index === 3) && this.state.upControlLength) {
        actionArmUp(index, '左', (items[0]['leftDragUpAngle'] - 1) * Math.PI / 180, -items[3]['leftDragUpHorAngle'] * Math.PI / 180, 1000);
        actionArmUp(index, '右', (items[2]['rightDragUpAngle'] - 1) * Math.PI / 180, items[5]['rightDragUpHorAngle'] * Math.PI / 180, 1000);
        actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - (items[0]['leftDragUpAngle'] - 1)) * Math.PI / 180, -items[9]['leftDragDownHorAngle'] * Math.PI / 180, 1000)
        actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - (items[2]['rightDragUpAngle'] - 1)) * Math.PI / 180, items[11]['rightDragDownHorAngle'] * Math.PI / 180, 1000)
        items[0]['leftDragUpAngle'] = items[0]['leftDragUpAngle'] - 1;
        items[2]['rightDragUpAngle'] = items[2]['rightDragUpAngle'] - 1;

      } else if (this.state.upHorControlLength && (index === 4 || index === 6)) {
        actionArm(index, '左', 1, items[0]['leftDragUpAngle'] * Math.PI / 180, -(items[3]['leftDragUpHorAngle'] - 1) * Math.PI / 180);
        actionArm(index, '右', 1, items[2]['rightDragUpAngle'] * Math.PI / 180, (items[5]['rightDragUpHorAngle'] - 1) * Math.PI / 180);
        items[3]['leftDragUpHorAngle'] = items[3]['leftDragUpHorAngle'] - 1;
        items[5]['rightDragUpHorAngle'] = items[5]['rightDragUpHorAngle'] - 1;
      } else if ((index === 7 || index === 9) && this.state.downControlLength) {
        actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - 1 - items[0]['leftDragUpAngle']) * Math.PI / 180, -items[9]['leftDragDownHorAngle'] * Math.PI / 180, 1000)
        actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - 1 - items[2]['rightDragUpAngle']) * Math.PI / 180, items[11]['rightDragDownHorAngle'] * Math.PI / 180, 1000)
        items[6]['leftDragDownAngle'] = items[6]['leftDragDownAngle'] - 1;
        items[8]['rightDragDownAngle'] = items[8]['rightDragDownAngle'] - 1;
      } else if ((index === 10 || index === 12) && this.state.downHorControlLength) {
        actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - items[0]['leftDragUpAngle']) * Math.PI / 180, -(items[9]['leftDragDownHorAngle'] - 1) * Math.PI / 180, 1000);
        actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - items[2]['rightDragUpAngle']) * Math.PI / 180, (items[11]['rightDragDownHorAngle'] - 1) * Math.PI / 180, 1000);
        items[9]['leftDragDownHorAngle'] = items[9]['leftDragDownHorAngle'] - 1;
        items[11]['rightDragDownHorAngle'] = items[11]['rightDragDownHorAngle'] - 1;
      } else if ((index === 13 || index === 15) && this.state.headControl) {
        targetHeadArm('左', (items[12]['leftRunAngle'] - 1) * Math.PI / 180);
        targetHeadArm('右', (items[12]['leftRunAngle'] - 1) * Math.PI / 180);
        items[12]['leftRunAngle'] = (items[12]['leftRunAngle'] - 1);
        items[14]['rightRunAngle'] = (items[14]['rightRunAngle'] - 1);
      } else {
        switch (index) {
          case 1:
            actionArmUp(index, '左', (items[0]['leftDragUpAngle'] - 1) * Math.PI / 180, -items[3]['leftDragUpHorAngle'] * Math.PI / 180, 1000);
            actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - (items[0]['leftDragUpAngle'] - 1)) * Math.PI / 180, -items[9]['leftDragDownHorAngle'] * Math.PI / 180, 1000)
            items[0]['leftDragUpAngle'] = items[0]['leftDragUpAngle'] - 1;
            break;
          case 3:
            actionArmUp(index, '右', (items[2]['rightDragUpAngle'] - 1) * Math.PI / 180, items[5]['rightDragUpHorAngle'] * Math.PI / 180, 1000);
            actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - (items[2]['rightDragUpAngle'] - 1)) * Math.PI / 180, items[11]['rightDragDownHorAngle'] * Math.PI / 180, 1000)
            items[2]['rightDragUpAngle'] = items[2]['rightDragUpAngle'] - 1;
            break;
          case 4:
            actionArmUp(index, '左', items[index - 4][items[index - 4]['reName']] * Math.PI / 180, -(items[3]['leftDragUpHorAngle'] - 1) * Math.PI / 180, 1000)
            items[3]['leftDragUpHorAngle'] = items[3]['leftDragUpHorAngle'] - 1;
            break;
          case 6:
            actionArmUp(index, '右', items[index - 4][items[index - 4]['reName']] * Math.PI / 180, (items[5]['rightDragUpHorAngle'] - 1) * Math.PI / 180, 1000)
            items[5]['rightDragUpHorAngle'] = items[5]['rightDragUpHorAngle'] - 1;
            break;
          case 7:
            actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - 1 - items[0]['leftDragUpAngle']) * Math.PI / 180, -items[9]['leftDragDownHorAngle'] * Math.PI / 180, 1000)
            items[6]['leftDragDownAngle'] = items[6]['leftDragDownAngle'] - 1;
            break;
          case 9:
            actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - 1 - items[2]['rightDragUpAngle']) * Math.PI / 180, items[11]['rightDragDownHorAngle'] * Math.PI / 180, 1000)
            items[8]['rightDragDownAngle'] = items[8]['rightDragDownAngle'] - 1;
            break;
          case 10:
            actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - items[0]['leftDragUpAngle']) * Math.PI / 180, -(items[9]['leftDragDownHorAngle'] - 1) * Math.PI / 180, 1000);
            items[9]['leftDragDownHorAngle'] = items[9]['leftDragDownHorAngle'] - 1;
            break;
          case 12:
            actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - items[2]['rightDragUpAngle']) * Math.PI / 180, (items[11]['rightDragDownHorAngle'] - 1) * Math.PI / 180, 1000);
            items[11]['rightDragDownHorAngle'] = items[11]['rightDragDownHorAngle'] - 1;
            break;
          case 13:
            targetHeadArm('左', (items[12]['leftRunAngle'] - 1) * Math.PI / 180);
            items[12]['leftRunAngle'] = (items[12]['leftRunAngle'] - 1);
            break;
          case 15:
            targetHeadArm('右', (items[14]['rightRunAngle'] - 1) * Math.PI / 180);
            items[14]['rightRunAngle'] = (items[14]['rightRunAngle'] - 1);
            break;
            default:
        }
      }
    } else if (type === 'add') {
      if ((index === 1 || index === 3) && this.state.upControlLength) {
        actionArmUp(index, '左', (items[0]['leftDragUpAngle'] + 1) * Math.PI / 180, -items[3]['leftDragUpHorAngle'] * Math.PI / 180);
        actionArmUp(index, '右', (items[2]['rightDragUpAngle'] + 1) * Math.PI / 180, items[5]['rightDragUpHorAngle'] * Math.PI / 180);
        actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - (items[0]['leftDragUpAngle'] + 1)) * Math.PI / 180, -items[9]['leftDragDownHorAngle'] * Math.PI / 180, 1000)
        actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - (items[2]['rightDragUpAngle'] + 1)) * Math.PI / 180, items[11]['rightDragDownHorAngle'] * Math.PI / 180, 1000)
        items[0]['leftDragUpAngle'] = items[0]['leftDragUpAngle'] + 1;
        items[2]['rightDragUpAngle'] = items[2]['rightDragUpAngle'] + 1;
      } else if (this.state.upHorControlLength && (index === 4 || index === 6)) {
        actionArm(index, '左', 1, items[0]['leftDragUpAngle'] * Math.PI / 180, -(items[3]['leftDragUpHorAngle'] + 1) * Math.PI / 180);
        actionArm(index, '右', 1, items[2]['rightDragUpAngle'] * Math.PI / 180, (items[5]['rightDragUpHorAngle'] + 1) * Math.PI / 180);
        items[3]['leftDragUpHorAngle'] = items[3]['leftDragUpHorAngle'] + 1;
        items[5]['rightDragUpHorAngle'] = items[5]['rightDragUpHorAngle'] + 1;
      } else if ((index === 7 || index === 9) && this.state.downControlLength) {
        actionArmDown(index, '左', (items[6]['leftDragDownAngle'] + 1 - items[0]['leftDragUpAngle']) * Math.PI / 180, -items[9]['leftDragDownHorAngle'] * Math.PI / 180, 1000)
        actionArmDown(index, '右', (items[8]['rightDragDownAngle'] + 1 - items[2]['rightDragUpAngle']) * Math.PI / 180, items[11]['rightDragDownHorAngle'] * Math.PI / 180, 1000)
        items[6]['leftDragDownAngle'] = items[6]['leftDragDownAngle'] + 1;
        items[8]['rightDragDownAngle'] = items[8]['rightDragDownAngle'] + 1;
      } else if ((index === 10 || index === 12) && this.state.downHorControlLength) {
        actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - items[0]['leftDragUpAngle']) * Math.PI / 180, -(items[9]['leftDragDownHorAngle'] + 1) * Math.PI / 180, 1000);
        actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - items[2]['rightDragUpAngle']) * Math.PI / 180, (items[11]['rightDragDownHorAngle'] + 1) * Math.PI / 180, 1000);
        items[9]['leftDragDownHorAngle'] = items[9]['leftDragDownHorAngle'] + 1;
        items[11]['rightDragDownHorAngle'] = items[11]['rightDragDownHorAngle'] + 1;
      } else if ((index === 13 || index === 15) && this.state.headControl) {
        targetHeadArm('左', (Number(items[12]['leftRunAngle']) + 1) * Math.PI / 180);
        targetHeadArm('右', (Number(items[12]['leftRunAngle']) + 1) * Math.PI / 180);
        items[12]['leftRunAngle'] = (Number(items[12]['leftRunAngle']) + 1);
        items[14]['rightRunAngle'] = (Number(items[14]['rightRunAngle']) + 1);
      } else {
        switch (index) {
          case 1:
            actionArmUp(index, '左', (items[0]['leftDragUpAngle'] + 1) * Math.PI / 180, -items[3]['leftDragUpHorAngle'] * Math.PI / 180, 1000);
            actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - (items[0]['leftDragUpAngle'] + 1)) * Math.PI / 180, -items[9]['leftDragDownHorAngle'] * Math.PI / 180, 1000)
            items[0]['leftDragUpAngle'] = items[0]['leftDragUpAngle'] + 1;
            break;
          case 3:
            actionArmUp(index, '右', (items[2]['rightDragUpAngle'] + 1) * Math.PI / 180, items[5]['rightDragUpHorAngle'] * Math.PI / 180, 1000);
            actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - (items[2]['rightDragUpAngle'] + 1)) * Math.PI / 180, items[11]['rightDragDownHorAngle'] * Math.PI / 180, 1000)
            items[2]['rightDragUpAngle'] = items[2]['rightDragUpAngle'] + 1;
            break;
          case 4:
            actionArmUp(index, '左', items[index - 4][items[index - 4]['reName']] * Math.PI / 180, -(items[3]['leftDragUpHorAngle'] + 1) * Math.PI / 180, 1000)
            items[3]['leftDragUpHorAngle'] = items[3]['leftDragUpHorAngle'] + 1;
            break;
          case 6:
            actionArmUp(index, '右', items[index - 4][items[index - 4]['reName']] * Math.PI / 180, items[5]['rightDragUpHorAngle'] * Math.PI / 180, 1000)
            items[5]['rightDragUpHorAngle'] = items[5]['rightDragUpHorAngle'] + 1;
            break;
          case 7:
            actionArmDown(index, '左', (items[6]['leftDragDownAngle'] + 1 - items[0]['leftDragUpAngle']) * Math.PI / 180, -items[9]['leftDragDownHorAngle'] * Math.PI / 180, 1000)
            items[6]['leftDragDownAngle'] = items[6]['leftDragDownAngle'] + 1;
            break;
          case 9:
            actionArmDown(index, '右', (items[8]['rightDragDownAngle'] + 1 - items[2]['rightDragUpAngle']) * Math.PI / 180, items[11]['rightDragDownHorAngle'] * Math.PI / 180, 1000)
            items[8]['rightDragDownAngle'] = items[8]['rightDragDownAngle'] + 1;
            break;
          case 10:
            actionArmDown(index, '左', (items[6]['leftDragDownAngle'] - items[0]['leftDragUpAngle']) * Math.PI / 180, -(items[9]['leftDragDownHorAngle'] + 1) * Math.PI / 180, 1000);
            items[9]['leftDragDownHorAngle'] = items[9]['leftDragDownHorAngle'] + 1;
            break;
          case 12:
            actionArmDown(index, '右', (items[8]['rightDragDownAngle'] - items[2]['rightDragUpAngle']) * Math.PI / 180, (items[11]['rightDragDownHorAngle'] + 1) * Math.PI / 180, 1000);
            items[11]['rightDragDownHorAngle'] = items[11]['rightDragDownHorAngle'] + 1;
            break;
          case 13:
            targetHeadArm('左', (Number(items[12]['leftRunAngle']) + 1) * Math.PI / 180);
            items[12]['leftRunAngle'] = (Number(items[12]['leftRunAngle']) + 1);
            break;
          case 15:
            targetHeadArm('右', (Number(items[14]['rightRunAngle']) + 1) * Math.PI / 180);
            items[14]['rightRunAngle'] = (Number(items[14]['rightRunAngle']) + 1);
            break;
            default:
        }
      }
    }
    store.dispatch({
      type: 'FREEDATA',
      data: items
    })
    this.setState({
      data: items
    }, () => {
      this.getOverallEvaluation();
    })
  }
  /**
   * 控制是否关联
   * @param {*} type 关联id
   */
  lengthControl = (type) => {
    if (type === 'up') {
      this.setState({
        upControlLength: !this.state.upControlLength
      })
    } else if (type === 'upHor') {
      this.setState({
        upHorControlLength: !this.state.upHorControlLength
      })
    } else if (type === 'downHor') {
      this.setState({
        downHorControlLength: !this.state.downHorControlLength
      })
    } else if (type === 'down') {
      this.setState({
        downControlLength: !this.state.downControlLength
      })
    } else if (type === 'downhead') {
      this.setState({
        headControl: !this.state.headControl
      })
    }
  }
  getOverallEvaluation() {
    let limitData = this.state.limitData;
    let items = this.state.data;
    let arr = [];
    arr.push({ id: 1, name: '耙臂角度/最佳角度【范围】', child: [] })
    arr[0].child.push({
      id: 1,
      title: '上耙管',
      key: '左',
      vert: items[0]['leftDragUpAngle'],
      verGood: limitData[0].good,
      verMin: limitData[0].min,
      verMax: limitData[0].max,
      hor: items[3]['leftDragUpHorAngle'],
      horGood: limitData[1].good,
      horMin: limitData[1].min,
      horMax: limitData[1].max
    })
    arr[0].child.push({
      id: 2,
      title: '上耙管',
      key: '右',
      vert: items[2]['rightDragUpAngle'],
      verGood: limitData[0].good,
      verMin: limitData[0].min,
      verMax: limitData[0].max,
      hor: items[5]['rightDragUpHorAngle'],
      horGood: limitData[1].good,
      horMin: limitData[1].min,
      horMax: limitData[1].max
    })
    arr[0].child.push({
      id: 3,
      title: '下耙管',
      key: '左',
      vert: items[6]['leftDragDownAngle'],
      verGood: limitData[2].good,
      verMin: limitData[2].min,
      verMax: limitData[2].max,
      hor: items[9]['leftDragDownHorAngle'],
      horGood: limitData[3].good,
      horMin: limitData[3].min,
      horMax: limitData[3].max
    })
    arr[0].child.push({
      id: 4,
      title: '下耙管',
      key: '右',
      vert: items[8]['rightDragDownAngle'],
      verGood: limitData[2].good,
      verMin: limitData[2].min,
      verMax: limitData[2].max,
      hor: items[11]['rightDragDownHorAngle'],
      horGood: limitData[3].good,
      horMin: limitData[3].min,
      horMax: limitData[3].max
    })
    arr.push({ id: 2, name: '耙头活动罩角度/最佳角度【范围】', child: [] })
    arr[1].child.push({
      id: 1,
      title: '活动罩',
      key: '左',
      vert: items[12]['leftRunAngle'],
      verGood: limitData[4].good,
      verMin: limitData[4].min,
      verMax: limitData[4].max
    })
    arr[1].child.push({
      id: 2,
      title: '活动罩',
      key: '右',
      vert: items[14]['rightRunAngle'],
      verGood: limitData[4].good,
      verMin: limitData[4].min,
      verMax: limitData[4].max
    })
    arr[1].child.push({
      id: 1,
      title: '活动罩对地角度',
      key: '左',
      vert: items[6]['leftDragDownAngle'] - items[12]['leftRunAngle'],
      verGood: limitData[2].good - limitData[4].good,
      verMin: limitData[2].min - limitData[4].min,
      verMax: limitData[2].max - limitData[4].max
    })
    arr[1].child.push({
      id: 3,
      title: '活动罩对地角度',
      key: '右',
      vert: items[8]['rightDragDownAngle'] - items[14]['rightRunAngle'],
      verGood: limitData[2].good - limitData[4].good,
      verMin: limitData[2].min - limitData[4].min,
      verMax: limitData[2].max - limitData[4].max
    })

    this.setState({
      overallEvaluation: arr
    },
      () => {
        this.getGuidance()

      })
  }
  getGuidance() {
    let temp = JSON.parse(JSON.stringify(this.state.overallEvaluation));
    let allNice = true;
    for (let i = 0; i < temp.length; i++) {
      let oneNice = true;
      let twoNice = true;
      let which = true;
      for (let j = 0; j < temp[i].child.length; j++) {
        if (temp[i].child[j].hor !== undefined) {
          if (temp[i].child[j].vert >= temp[i].child[j].verMin && temp[i].child[j].vert <= temp[i].child[j].verMax) {
            temp[i].child[j]['verNice'] = true;
          } else {
            allNice = false;
            oneNice = false;
            temp[i].child[j]['verNice'] = false;
          }
          if (temp[i].child[j].hor >= temp[i].child[j].horMin && temp[i].child[j].hor <= temp[i].child[j].horMax) {
            temp[i].child[j]['horNice'] = true;
          } else {
            allNice = false;
            oneNice = false;
            temp[i].child[j]['horNice'] = false;
          }
        } else {
          which = false;
          if (temp[i].child[j].vert >= temp[i].child[j].verMin && temp[i].child[j].vert <= temp[i].child[j].verMax) {
            temp[i].child[j]['verNice'] = true;
          } else {
            allNice = false;
            twoNice = false;
            temp[i].child[j]['verNice'] = false;
          }
        }
      }
      temp[i]['twoNice'] = twoNice;
      temp[i]['oneNice'] = oneNice;
      temp[i]['which'] = which;
      // temp[i]['oneNice'] = true;
      // temp[i]['twoNice'] = false
      // temp[i]['which'] = true;

    }
    console.log(temp)
    if (allNice) {
      this.setState({
        guidance: []
      })
    } else {
      this.setState({
        guidance: temp
      })
    }
  }
  componentDidMount() {
    this.getOverallEvaluation()
  }
  changeDisplayStatue(e, data) {
    // console.log(data);
    let type = e.target.value;
    if(type ==='左耙' || type ==='右耙'){
      let tempData = [];
      data.forEach(item=>{
        // 当参数数组是值，而不是连接符时
        if(item.val !== undefined && item.val.indexOf(e.target.value) >=0) tempData.push(item);
      });
      this.setState({
        displayData: tempData,
        upControlLength: false,
        upHorControlLength: false,
        downControlLength: false,
        downHorControlLength: false,
        headControl: false,
      })
    } else if(type === '双耙'){
      this.setState({
        displayData: data,
        upControlLength: true,
        upHorControlLength: true,
        downControlLength: true,
        downHorControlLength: true,
        headControl: true,
      })
    }
  }
  render() {
    const { data, displayData } = this.state;
    return (
      <div>
        <p>参数输入</p>
        <select name="3"
                id="statusSelect"
                onChange={(e) => this.changeDisplayStatue(e, data)}
        >
          <option className='title-name' key='1'>双耙</option>
          <option className='title-name' key='2'>左耙</option>
          <option className='title-name' key='3'>右耙</option>
        </select>
        <ul className="freeControlLink">
          {
            displayData.map((item, index) => (
              item.link ? <li key={index} className='connect'>
                {
                  item.reName === "up" ? <>{
                    this.state.upControlLength === true ? <LinkOutlined onClick={() => { this.lengthControl('up') }} /> : <DisconnectOutlined onClick={() => { this.lengthControl('up') }} />
                  }</> : null
                }
                {
                  item.reName === "down" ? <>{
                    this.state.downControlLength === true ? <LinkOutlined onClick={() => { this.lengthControl('down') }} /> : <DisconnectOutlined onClick={() => { this.lengthControl('down') }} />
                  }</> : null
                }
                {
                  item.reName === "upHor" ? <>{
                    this.state.upHorControlLength === true ? <LinkOutlined onClick={() => { this.lengthControl('upHor') }} /> : <DisconnectOutlined onClick={() => { this.lengthControl('upHor') }} />
                  }</> : null
                }
                {
                  item.reName === "downHor" ? <>{
                    this.state.downHorControlLength === true ? <LinkOutlined onClick={() => { this.lengthControl('downHor') }} /> : <DisconnectOutlined onClick={() => { this.lengthControl('downHor') }} />
                  }</> : null
                }
                {
                  item.reName === "downhead" ? <>{
                    this.state.headControl === true ? <LinkOutlined onClick={() => { this.lengthControl('downhead') }} /> : <DisconnectOutlined onClick={() => { this.lengthControl('downhead') }} />
                  }</> : null
                }
              </li> :
                <li key={index}>
                  <i></i>
                  <span>{item.val}</span>
                  <span className="degree">{item.unit}</span>
                  <div className="editValue">
                    <span onClick={(e) => this.setShipParams(item.id, null, 'reduce', item.attrName)}>-</span>
                    <input type="text" value={item[item.reName]} onChange={(e) => this.setShipParams(item.id, e, null, item.attrName)} />
                    <span onClick={(e) => this.setShipParams(item.id, null, 'add', item.attrName)}>+</span>
                  </div>
                </li>
            ))
          }
        </ul>
        <p>总体评价</p>
        <div className="comment">
          <ul>
            {
              this.state.overallEvaluation.map((item, index) => (
                <li key={index}>
                  {item.id}、{item.name}
                  {
                    item.child.map((ite, id) => (
                      <ul key={id}>
                        <li>
                          <p>{ite.key}&nbsp;{ite.title}</p>
                          <div className="comment_item_ang">
                            <div>
                              <span>垂直角度:{ite.vert}</span>
                              <span>最佳值:{ite.verGood}</span>
                              <span>范围:[{ite.verMin}-{ite.verMax}]</span>
                            </div>
                            {
                              ite.hor === undefined ? null : <div>
                                <span>水平角度:{ite.hor}</span>
                                <span>最佳值:{ite.horGood}</span>
                                <span>范围:[{ite.horMin}-{ite.horMax}]</span>
                              </div>
                            }

                          </div>
                        </li>
                      </ul>
                    ))
                  }
                </li>
              ))
            }
          </ul>
        </div>
        <p>指导意见</p>
        <div className="comment">
          <ul>
            {
              this.state.guidance.length === 0 ?
                <>
                  <p style={{ 'textAlign': 'center' }}>均在合理范围内</p>
                </> :
                this.state.guidance.map((item, index) => (
                  <li key={item.id}>
                    {item.id}、{item.name}
                    {
                      item.which ?
                        <>
                          {
                            item.oneNice ? <>
                              <p style={{ 'textAlign': 'center' }}>在合理范围内</p>
                            </> :
                              item.child.map((ite, id) => (
                                <>
                                  {
                                    ite.verNice ? null : <ul key={ite.id}>
                                      <li>
                                        <><p>{ite.key}{ite.title}垂直角度为{ite.vert},不在[{ite.verMin}-{ite.verMax}]范围内,需调整</p></>
                                      </li>
                                    </ul>

                                  }

                                  {
                                    ite.horNice ? null : <>
                                      <ul key={ite.id}>
                                        <li>
                                          <p>{ite.key}{ite.title}水平角度为{ite.hor},不在[{ite.horMin}-{ite.horMax}]范围内,需调整</p>
                                        </li>
                                      </ul>
                                    </>
                                  }
                                </>
                              ))
                          }
                        </> : <>
                          {
                            item.twoNice ? <>
                              <p style={{ 'textAlign': 'center' }}>在合理范围内</p>
                            </> :
                              item.child.map((ite, id) => (
                                <>
                                  {
                                    ite.verNice ? null : <ul key={ite.id}>
                                      <li>
                                        <p>{ite.key}{ite.title}角度为{ite.vert},不在[{ite.verMin}-{ite.verMax}]范围内，需调整</p>
                                      </li>
                                    </ul>
                                  }
                                </>
                              ))
                          }
                        </>
                    }
                  </li>
                ))
            }
          </ul>
        </div>
      </div>
    )
  }
}
function mapStateToProps(state) {
  return {
    freeData: state.freeData
  }
}

export default connect(mapStateToProps)(RightWinWrapFree);
